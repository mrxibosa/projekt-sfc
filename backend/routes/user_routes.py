from flask import Blueprint, jsonify, request
from models import db, User
from decorators import token_required, roles_required
from utils.validators import validate_json
import logging

user_routes = Blueprint('user_routes', __name__)
logger = logging.getLogger(__name__)

# ğŸŸ¢ HÃ¤mta info om inloggad anvÃ¤ndare
@user_routes.route('/me', methods=['GET'])
@token_required
def get_current_user(current_user):
    logger.info(f"AnvÃ¤ndare {current_user.id} hÃ¤mtade sina uppgifter.")
    return jsonify(current_user.serialize()), 200


# ğŸŸ¢ Skapa en ny anvÃ¤ndare (Endast admin)
@user_routes.route('/', methods=['POST'])
@token_required
@roles_required(['admin'])
@validate_json(['namn', 'email', 'lÃ¶senord', 'roll'])
def create_user(current_user):
    data = request.get_json()

    if User.query.filter_by(email=data['email']).first():
        return jsonify({"error": "E-postadressen Ã¤r redan registrerad"}), 409

    new_user = User(
        namn=data['namn'],
        email=data['email'],
        roll=data['roll']
    )
    new_user.set_password(data['lÃ¶senord'])
    db.session.add(new_user)
    db.session.commit()

    logger.info(f"Admin {current_user.id} skapade anvÃ¤ndare {data['email']}")
    return jsonify({"message": "AnvÃ¤ndare skapad", "user": new_user.serialize()}), 201


# ğŸ“„ HÃ¤mta alla anvÃ¤ndare (Endast admin)
@user_routes.route('/', methods=['GET'])
@token_required
@roles_required(['admin'])
def get_all_users(current_user):
    users = User.query.all()
    logger.info(f"Admin {current_user.id} hÃ¤mtade alla anvÃ¤ndare.")
    return jsonify({"users": [user.serialize() for user in users]}), 200


# ğŸ“„ HÃ¤mta en specifik anvÃ¤ndare (Endast admin)
@user_routes.route('/<int:user_id>', methods=['GET'])
@token_required
@roles_required(['admin'])
def get_user_by_id(current_user, user_id):
    user = User.query.get_or_404(user_id)
    logger.info(f"Admin {current_user.id} hÃ¤mtade anvÃ¤ndare {user_id}.")
    return jsonify({"user": user.serialize()}), 200


# ğŸ›  Uppdatera info om anvÃ¤ndare (Endast admin)
@user_routes.route('/<int:user_id>', methods=['PUT'])
@token_required
@roles_required(['admin'])
@validate_json(['namn', 'email', 'roll'])
def update_user(current_user, user_id):
    user = User.query.get_or_404(user_id)
    data = request.get_json()

    user.namn = data['namn']
    user.email = data['email']
    user.roll = data['roll']
    db.session.commit()

    logger.info(f"Admin {current_user.id} uppdaterade anvÃ¤ndare {user_id}.")
    return jsonify({"message": "AnvÃ¤ndare uppdaterad", "user": user.serialize()}), 200


# ğŸ”’ Uppdatera lÃ¶senord (Admin eller anvÃ¤ndaren sjÃ¤lv)
@user_routes.route('/<int:user_id>/password', methods=['PUT'])
@token_required
@validate_json(['lÃ¶senord'])
def update_password(current_user, user_id):
    user = User.query.get_or_404(user_id)
    if current_user.id != user.id and current_user.roll != "admin":
        return jsonify({"error": "Endast anvÃ¤ndaren sjÃ¤lv eller admin kan Ã¤ndra lÃ¶senord"}), 403

    data = request.get_json()
    user.set_password(data['lÃ¶senord'])
    db.session.commit()

    logger.info(f"LÃ¶senord Ã¤ndrat fÃ¶r anvÃ¤ndare {user_id} av {current_user.id}.")
    return jsonify({"message": "LÃ¶senord uppdaterat"}), 200


# ğŸ—‘ Ta bort en anvÃ¤ndare (Endast admin)
@user_routes.route('/<int:user_id>', methods=['DELETE'])
@token_required
@roles_required(['admin'])
def delete_user(current_user, user_id):
    user = User.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()

    logger.info(f"Admin {current_user.id} tog bort anvÃ¤ndare {user_id}.")
    return jsonify({"message": "AnvÃ¤ndare borttagen"}), 200
