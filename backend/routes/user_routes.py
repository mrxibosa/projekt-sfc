from flask import Blueprint, jsonify, request
from models import db, User
from decorators import token_required
import logging

# Skapa Blueprint
user_routes = Blueprint('user_routes', __name__)

# ğŸ›  HjÃ¤lpfunktion: Validera inkommande data
def validate_request_data(required_fields):
    data = request.get_json()
    if not data:
        return None, jsonify({"error": "Ingen data skickades"}), 400
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        return None, jsonify({"error": f"Saknar fÃ¶ljande fÃ¤lt: {', '.join(missing_fields)}"}), 400
    return data, None

# ğŸ›  HjÃ¤lpfunktion: Loggning
logging.basicConfig(level=logging.INFO)


# ğŸŸ¢ HÃ¤mta info om inloggad anvÃ¤ndare
@user_routes.route('/me', methods=['GET'])
@token_required
def get_current_user(current_user):
    logging.info(f"AnvÃ¤ndare {current_user.id} hÃ¤mtade sina uppgifter.")
    return jsonify({
        "id": current_user.id,
        "namn": current_user.namn,
        "email": current_user.email,
        "roll": current_user.roll
    }), 200


# ğŸŸ¢ Skapa en ny anvÃ¤ndare (Endast admin)
@user_routes.route('/', methods=['POST'])
@token_required
def create_user(current_user):
    if current_user.roll != "admin":
        return jsonify({"error": "Endast admin kan skapa nya anvÃ¤ndare"}), 403

    data, error = validate_request_data(['namn', 'email', 'lÃ¶senord', 'roll'])
    if error:
        return error

    user_exists = User.query.filter_by(email=data['email']).first()
    if user_exists:
        return jsonify({"error": "E-postadressen Ã¤r redan registrerad"}), 409

    new_user = User(
        namn=data['namn'],
        email=data['email'],
        roll=data['roll']
    )
    new_user.set_password(data['lÃ¶senord'])
    db.session.add(new_user)
    db.session.commit()

    logging.info(f"Admin {current_user.id} skapade en ny anvÃ¤ndare med e-post: {data['email']}.")
    return jsonify({"message": "AnvÃ¤ndare skapad", "user": new_user.serialize()}), 201


# ğŸ“„ HÃ¤mta alla anvÃ¤ndare (Endast admin)
@user_routes.route('/', methods=['GET'])
@token_required
def get_all_users(current_user):
    if current_user.roll != "admin":
        return jsonify({"error": "Endast admin kan hÃ¤mta alla anvÃ¤ndare"}), 403

    users = User.query.all()
    logging.info(f"Admin {current_user.id} hÃ¤mtade alla anvÃ¤ndare.")
    return jsonify({"users": [user.serialize() for user in users]}), 200


# ğŸ“„ HÃ¤mta en specifik anvÃ¤ndare (Endast admin)
@user_routes.route('/<int:user_id>', methods=['GET'])
@token_required
def get_user_by_id(current_user, user_id):
    if current_user.roll != "admin":
        return jsonify({"error": "Endast admin kan hÃ¤mta anvÃ¤ndardetaljer"}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "AnvÃ¤ndare hittades inte"}), 404

    logging.info(f"Admin {current_user.id} hÃ¤mtade anvÃ¤ndardetaljer fÃ¶r anvÃ¤ndare {user_id}.")
    return jsonify({"user": user.serialize()}), 200


# ğŸ›  Uppdatera info om en anvÃ¤ndare (Endast admin)
@user_routes.route('/<int:user_id>', methods=['PUT'])
@token_required
def update_user(current_user, user_id):
    if current_user.roll != "admin":
        return jsonify({"error": "Endast admin kan uppdatera anvÃ¤ndare"}), 403

    data, error = validate_request_data(['namn', 'email', 'roll'])
    if error:
        return error

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "AnvÃ¤ndare hittades inte"}), 404

    user.namn = data['namn']
    user.email = data['email']
    user.roll = data['roll']
    db.session.commit()

    logging.info(f"Admin {current_user.id} uppdaterade anvÃ¤ndare {user_id}.")
    return jsonify({"message": "AnvÃ¤ndare uppdaterad", "user": user.serialize()}), 200


# ğŸ”’ Uppdatera lÃ¶senord fÃ¶r en anvÃ¤ndare (Endast inloggad anvÃ¤ndare eller admin)
@user_routes.route('/<int:user_id>/password', methods=['PUT'])
@token_required
def update_password(current_user, user_id):
    data, error = validate_request_data(['lÃ¶senord'])
    if error:
        return error

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "AnvÃ¤ndare hittades inte"}), 404

    # Endast anvÃ¤ndaren sjÃ¤lv eller admin kan uppdatera lÃ¶senord
    if current_user.id != user.id and current_user.roll != "admin":
        return jsonify({"error": "Endast anvÃ¤ndaren sjÃ¤lv eller admin kan uppdatera lÃ¶senord"}), 403

    user.set_password(data['lÃ¶senord'])
    db.session.commit()

    logging.info(f"AnvÃ¤ndare {current_user.id} uppdaterade lÃ¶senord fÃ¶r anvÃ¤ndare {user_id}.")
    return jsonify({"message": "LÃ¶senord uppdaterat"}), 200


# ğŸ—‘ Ta bort en anvÃ¤ndare (Endast admin)
@user_routes.route('/<int:user_id>', methods=['DELETE'])
@token_required
def delete_user(current_user, user_id):
    if current_user.roll != "admin":
        return jsonify({"error": "Endast admin kan ta bort anvÃ¤ndare"}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "AnvÃ¤ndare hittades inte"}), 404

    db.session.delete(user)
    db.session.commit()

    logging.info(f"Admin {current_user.id} tog bort anvÃ¤ndare {user_id}.")
    return jsonify({"message": "AnvÃ¤ndare borttagen"}), 200
